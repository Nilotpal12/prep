| **Type**                              | **Thread Safe?**         | **Lazy Init?** | **Reflection Safe?** | **Serialization Safe?** | **Code Complexity** | **When to Use**                                                        |
| ------------------------------------- | ------------------------ | -------------- | -------------------- | ----------------------- | ------------------- | ---------------------------------------------------------------------- |
| **1. Eager Singleton**                | ✅ Yes (JVM loads static) | ❌ No           | ❌ No                 | ❌ No (unless handled)   | ⭐ Simple            | When instance is lightweight and will be used always                   |
| **2. Lazy Singleton**                 | ❌ No (basic)             | ✅ Yes          | ❌ No                 | ❌ No                    | ⭐⭐ Simple           | When instance may not always be needed, but no multithreading involved |
| **3. Synchronized Lazy Singleton**    | ✅ Yes (via sync)         | ✅ Yes          | ❌ No                 | ❌ No                    | ⭐⭐⭐ Medium          | When lazy init is needed and multithreading is involved (but slower)   |
| **4. Double-Checked Locking**         | ✅ Yes                    | ✅ Yes          | ❌ No                 | ❌ No                    | ⭐⭐⭐⭐ Advanced       | When performance matters, and thread-safety + lazy load is needed      |
| **5. Bill Pugh (Static Inner Class)** | ✅ Yes (JVM handles it)   | ✅ Yes          | ✅ Yes (mostly)       | ✅ Yes (with care)       | ⭐⭐⭐ Elegant         | Best for lazy-loaded, thread-safe singleton without sync overhead      |
| **6. Enum Singleton**                 | ✅ Yes                    | ❌ No           | ✅ Yes                | ✅ Yes                   | ⭐⭐ Easiest          | Most robust singleton; safe against all known threats                  |
